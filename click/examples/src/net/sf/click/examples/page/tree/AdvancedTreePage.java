package net.sf.click.examples.page.tree;

import java.io.Serializable;
import net.sf.click.control.Checkbox;
import net.sf.click.control.FieldSet;
import net.sf.click.extras.control.tree.CheckboxTree;
import net.sf.click.extras.control.tree.Tree;
import net.sf.click.control.Form;
import net.sf.click.control.Submit;
import net.sf.click.examples.page.BorderPage;
import net.sf.click.extras.control.tree.TreeNode;

/**
 * Example usage of some extra functionality of the {@link Tree} control.
 *
 * @author Bob Schellink
 */
public class AdvancedTreePage extends BorderPage {
    
    public static final String TREE_NODES_SESSION_KEY = "advancedTreeNodes";
    
    private Tree tree;
    
    public void onInit() {
        super.onInit();
        
        //Create the tree and tree model and add it to the page
        tree = buildTree();
        addControl(tree);
        
        //Build the options user interface for users to interactively
        //change the tree values.
        buildOptionsUI();
    }
    
    /**
     * Creates and return a new tree instance.
     */
    public Tree createTree() {
        return new Tree("advancedTree" );
    }
    
    /**
     * Build the tree model and stores it in the session.
     */
    public Tree buildTree() {
        tree = createTree();
        tree.setContext(getContext());
        
        //Try and load the already stored nodes from the session.
        //If this is the first time we access the page, this method
        //will return null, indicating no nodes is stored.
        TreeNode existingRootNode = loadNodesFromSession();
        
        if(existingRootNode != null) {
            //OK we had already nodes stored in the session, so no need
            //to rebuild them. We attach the root node and return.
            tree.setRootNode(existingRootNode);
            
            return tree;
        }
        
        //Create a node representing the root directory with the specified 
        //parameter as the value. Because an id is not specified, a random 
        //one will be generated by the node. By default the root node is 
        //not rendered by the tree. This can be changed by calling 
        //tree.setRootNodeDisplayed(true).
        TreeNode root = new TreeNode("c:");
        
        //Create a new directory, setting the root directory as its parent. Here
        //we do specify a id as the 2nd argument, so no id is generated.
        TreeNode dev = new TreeNode("dev","1", root);
        
        //The follwing 2 nodes represent files in the directory, setting the
        //dev node as their parent. Note the false argument to the constructor.
        //This means that the specific node does not support child nodes, and
        //it will be rendered as a leaf icon. If children are supported (the
        //default value) then even  if the node is a leaf, it will still be rendered
        //as a collapsed icon. In the example a default leaf node will be 
        //rendered as a directory, and a node that does not support children is
        //rendered as a file.
        new TreeNode("java.pdf", "2", dev, false);
        new TreeNode("ruby.pdf", "3", dev, false);
        
        //We continue constructing the rest of the tree
        TreeNode programFiles = new TreeNode("program files", "4", root);
        TreeNode adobe = new TreeNode("Adobe", "5", programFiles);
        
        TreeNode download = new TreeNode("downloads","6", root);
        
        TreeNode web = new TreeNode("web", "7", download);
        new TreeNode("html.pdf", "8", web, false);
        new TreeNode("css.html", "9", web, false);
        
        TreeNode databases = new TreeNode("databases", "10", download);
        new TreeNode("mysql.html","11",databases, false);
        new TreeNode("oracle.pdf","12",databases, false);
        new TreeNode("postgres","13",databases, false);
        
        //Attach the root node containing all the other nodes to the tree
        tree.setRootNode(root);
        
        //By default root node is not displayed in browser. Here we expand it,
        //so that the root's children are visible.
        tree.expand(root);
        
        //Store the tree nodes in the session so on the next request we do not
        //have to rebuild it. Also because we keep the tree nodes in the session
        //the nodes will keep their state between requests.
        storeNodesInSession(root);
        
        return tree;
    }
    
    /**
     * Called when user clicks on submit
     */
    public boolean onSelectClick() {
        tree.bindSelectOrDeselectValues();
        return true;
    }
    
    //--------------------------------------------------------------------------- NOTE
    //The code below is not specific to the tree control. It was moved here
    //so as not to distract the user from the use of the tree control.
    
    private Form optionsForm;
    private Checkbox jsEnabled = new Checkbox("jsEnabled", "JavaScript Enabled");
    private Checkbox rootNodeDisplayed = new Checkbox("rootNodeDisplayed", "Display root node");
    private Submit applyOptions = new Submit("apply", "Apply Options", this, "onApplyOptionsClick");
    
    /**
     * Builds the user interface for users to change the tree options interactively.
     */
    public void buildOptionsUI() {
        //Form to handle user selected options
        optionsForm = new Form("optionForm");
        FieldSet fieldSet = new FieldSet("options", "Form Options");
        fieldSet.add(jsEnabled);
        fieldSet.add(rootNodeDisplayed);
        optionsForm.add(fieldSet);
        
        addControl(optionsForm);
        optionsForm.add(applyOptions);
        
        //Apply users existing options
        applyOptions();
    }
    
    /**
     * Called when user submits the options form.
     */
    public boolean onApplyOptionsClick() {
        //Reset the tree and nodes to default values
        resetTree();
        
        //Store the users options in the session
        TreeOptions options = new TreeOptions();
        options.javascriptEnabled = jsEnabled.isChecked();
        options.rootNodeDisplayed = rootNodeDisplayed.isChecked();
        setSessionObject(options);
        
        //Apply users new options
        applyOptions();
        
        return true;
    }
    
    /** Form options holder. */
    public static class TreeOptions implements Serializable {
        private static final long serialVersionUID = 1L;
        boolean javascriptEnabled= false;
        boolean rootNodeDisplayed = false;
    }
    
    /**
     * Reset the tree to initial state
     */
    private void resetTree() {
        //Clear all current selections so the tree can start afresh with new options enabled
        tree.deselectAll();
        
        if(!jsEnabled.isChecked()) {
            //If javascript is disabled, collapse all nodes so tree is in collapsed state on browser
            tree.collapseAll();
        }
        
        if(!rootNodeDisplayed.isChecked()) {
            //If rootNodeDisplayed is false, the root node is not displayed in browser. Here we
            //expand it,  so that the root's children are visible.
            tree.expand(tree.getRootNode());
        }
    }
    
    /**
     * Store the tree nodes in the session
     */
    private void storeNodesInSession(TreeNode rootNode) {
        if(getContext() == null)
            return;
        if(tree.getRootNode() == null)
            return;
        getContext().getSession().setAttribute(TREE_NODES_SESSION_KEY, rootNode);
    }
    
    /**
     * Retrieve the tree nodes from the session if available. Otherwise we return
     * null.
     */
    private TreeNode loadNodesFromSession() {
        if(getContext() == null)
            return null;
        
        return (TreeNode) getContext().getSession().getAttribute(TREE_NODES_SESSION_KEY);
    }
    
    /**
     * Enable javascript so that there are no round trips to server
     * when expand and collapsing nodes.
     */
    private void enableJavascript(boolean enable) {
        //This call enables the client side javascript functionality
        tree.setJavascriptEnabled(enable);
        
        if(enable) {
            //Expand all nodes so that the entire tree is available on browser
            tree.expandAll();
        }
    }
    
    /**
     * Applies the user selected options to the tree like enabling javascript,
     * displaying the root node etc.
     */
    private void applyOptions() {
        
        //We retrieve our stored options from the session and set the controls state
        TreeOptions options = (TreeOptions) getSessionObject(TreeOptions.class);
        jsEnabled.setChecked(options.javascriptEnabled);
        rootNodeDisplayed.setChecked(options.rootNodeDisplayed);
        
        //Enable or disable javascript functionality based on users current option
        enableJavascript(options.javascriptEnabled);
        
        //Indicates if we want to display the root node or not.
        tree.setRootNodeDisplayed(options.rootNodeDisplayed);
        
        //Set model values for velocity to display extra help messages
        getModel().remove("isJavascriptEnabled");
        addModel("isJavascriptEnabled", new Boolean(options.javascriptEnabled));
    }
}
