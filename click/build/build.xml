<project name="click" default="help" basedir="..">

   <!-- 
    Project Properties 
    -->
    
   <property file="./build/build.properties"/>
   <property name="jar.cayenne" value="cayenne-nodeps-2.0.4.jar"/>
   <property name="jar.cayenne.1x" value="cayenne-nodeps-1.2.4.jar"/>
   <property name="jar.checkstyle" value="checkstyle-all-4.1.jar"/>
   <property name="jar.codec" value="commons-codec-1.3.jar"/>
   <property name="jar.collections" value="commons-collections-3.1.jar"/>  
   <property name="jar.hibernate" value="hibernate-3.1.3.jar"/>
   <property name="jar.io" value="commons-io-1.3.jar"/>
   <property name="jar.junit" value="junit-3.8.1.jar"/>
   <property name="jar.lang" value="commons-lang-2.1.jar"/>
   <property name="jar.log4j" value="log4j-1.2.14.jar"/>
   <property name="jar.ognl" value="ognl-2.6.9.jar"/>
   <property name="jar.servlet" value="servlet-api-2.3.jar"/>
   <property name="jar.spring-beans" value="spring-beans-1.2.9.jar"/>
   <property name="jar.spring-context" value="spring-context-1.2.9.jar"/>
   <property name="jar.spring-core" value="spring-core-1.2.9.jar"/>
   <property name="jar.spring-web" value="spring-web-1.2.9.jar"/>
   <property name="jar.upload" value="commons-fileupload-1.2.jar"/>
   <property name="jar.velocity" value="velocity-1.5.jar"/>
   <property name="repository" value="http://www.ibiblio.org/maven"/>
   <property name="maven-bundle" value="../maven-upload"/>


   <!--
    Task Definitions
    -->
	
   <taskdef name="linetrim"
   	        classname="dev.LineTrimTask" 
   	        classpath="lib/dev.jar"/>
							
   <taskdef name="replacetabs" 
   	        classname="dev.ReplaceTabsTask" 
   	        classpath="lib/dev.jar"/>
            
   <taskdef name="package" 
   	        classname="dev.PackageTask" 
   	        classpath="lib/dev.jar"/>
            
   <taskdef resource="checkstyletask.properties"
            classpath="lib/${jar.checkstyle}"/>


    <!--
     Macro Definitions
     -->
    
    <macrodef name="downloadMacro">
        <attribute name="name"/>
        <attribute name="path"/>
        <sequential>
            <get src="${repository}/@{path}/jars/@{name}" 
                 dest="lib/@{name}"
                 verbose="true"
                 usetimestamp="true"/>            
        </sequential>
    </macrodef> 
    
    <macrodef name="buildBundleMacro">
        <attribute name="name"/>
        <sequential>
            <mkdir dir="upload-bundle"/>
            <copy file="LICENSE.txt" todir="upload-bundle"/> 
            <copy file="build/@{name}.pom" tofile="upload-bundle/project.xml"/> 
            <replace file="upload-bundle/project.xml" 
                     token="VERSION" 
                     value="${version}"/>
            <copy file="dist/@{name}-${version}.jar" todir="upload-bundle"/> 
            <jar basedir="upload-bundle" destfile="${maven-bundle}/@{name}-${version}-bundle.jar"/>
            <delete dir="upload-bundle" quiet="false"/>
        </sequential>
    </macrodef>

    <macrodef  name="digestMacro">
        <attribute name="file"/>
        <sequential>
            <checksum file="@{file}" forceOverwrite="true" />
            <checksum file="@{file}" forceOverwrite="true" algorithm="SHA1" />
        </sequential>
    </macrodef>
   <!-- 
    Path Definitions
    -->
   
   <path id="classpath.framework">
      <pathelement location="framework/classes"/>
      <pathelement location="lib/${jar.codec}"/>
      <pathelement location="lib/${jar.collections}"/>
      <pathelement location="lib/${jar.io}"/>
      <pathelement location="lib/${jar.lang}"/>
      <pathelement location="lib/${jar.ognl}"/>
      <pathelement location="lib/${jar.servlet}"/>
      <pathelement location="lib/${jar.upload}"/>
      <pathelement location="lib/${jar.velocity}"/>
   </path>
   
   <path id="classpath.extras">
      <pathelement location="extras/classes"/> 
      <pathelement location="lib/${jar.cayenne}"/>
      <pathelement location="lib/${jar.hibernate}"/>
      <pathelement location="lib/${jar.log4j}"/>
      <pathelement location="lib/${jar.servlet}"/>
      <pathelement location="lib/${jar.spring-beans}"/>
      <pathelement location="lib/${jar.spring-context}"/>
      <pathelement location="lib/${jar.spring-core}"/>
      <pathelement location="lib/${jar.spring-web}"/>
      <pathelement location="dist/click-${version}.jar"/>
   </path>

   <path id="classpath.mock">
      <pathelement location="mock/classes"/>
      <pathelement location="lib/${jar.codec}"/>
      <pathelement location="lib/${jar.collections}"/>
      <pathelement location="lib/${jar.io}"/>
      <pathelement location="lib/${jar.lang}"/>
      <pathelement location="lib/${jar.ognl}"/>
      <pathelement location="lib/${jar.servlet}"/>
      <pathelement location="lib/${jar.upload}"/>
      <pathelement location="lib/${jar.velocity}"/>
      <pathelement location="dist/click-${version}.jar"/>
   </path>

   <path id="classpath.extras.cayenne.1x">
	  <pathelement location="temp/classes"/> 
	  <pathelement location="lib/${jar.cayenne.1x}"/>
	  <pathelement location="lib/${jar.hibernate}"/>
	  <pathelement location="lib/${jar.log4j}"/>
	  <pathelement location="lib/${jar.servlet}"/>
	  <pathelement location="lib/${jar.spring-beans}"/>
	  <pathelement location="lib/${jar.spring-context}"/>
	  <pathelement location="lib/${jar.spring-core}"/>
	  <pathelement location="lib/${jar.spring-web}"/>
	  <pathelement location="dist/click-${version}.jar"/>
   </path>

   <path id="classpath.examples"> 
      <pathelement location="lib/${jar.servlet}"/>
      <pathelement location="lib/${jar.spring-beans}"/>
      <pathelement location="lib/${jar.spring-context}"/>
      <pathelement location="lib/${jar.spring-core}"/>
      <pathelement location="lib/${jar.spring-web}"/>
      <pathelement location="dist/click-${version}.jar"/>
      <pathelement location="dist/click-extras-${version}.jar"/>
   </path>

   <path id="classpath.test"> 
      <pathelement location="lib/${jar.junit}"/>
   </path>

   <!-- 
    Target Definitions 
    -->
   
   <target name="build-all" 
           depends="build-framework, build-mock, build-extras, build-examples" 
           description="build Click framework, extras, mock, examples"/>


   <target name="build-distribution" 
           depends="clean, build-framework, build-mock, build-extras, build-examples, javadoc" 
           description="build distribution ZIP file">
      <!-- create distribution zip file -->
      <delete dir="click-${version}" quiet="false"/>
      <mkdir dir="click-${version}"/>
      <copy todir="click-${version}">
         <fileset dir="." casesensitive="yes">
            <exclude name=".**"/> 
            <exclude name=".**/**"/> 
            <exclude name="click-${version}"/> 
            <exclude name="TODO.txt"/>   
            <exclude name="bin/**"/>
            <exclude name="design/**"/>
            <exclude name="dist/*-src.zip"/>
            <exclude name="lib/${jar.cayenne}"/>
            <exclude name="lib/${jar.cayenne.1x}"/>
            <exclude name="lib/${jar.codec}"/>
            <exclude name="lib/${jar.collections}"/>
            <exclude name="lib/${jar.hibernate}"/>
            <exclude name="lib/${jar.io}"/>
            <exclude name="lib/${jar.lang}"/>
            <exclude name="lib/${jar.log4j}"/>
            <exclude name="lib/${jar.junit}"/>
            <exclude name="lib/${jar.ognl}"/>
            <exclude name="lib/${jar.servlet}"/>
            <exclude name="lib/${jar.velocity}"/>
            <exclude name="lib/spring-*.jar"/>
            <exclude name="lib/${jar.upload}"/>
            <exclude name="**/Thumbs.db"/>
            <exclude name="**/classes/**"/>
            <exclude name="**/WEB-INF/lib/**"/>
            <exclude name="examples/webapp/javadoc/**"/>
         </fileset>
      </copy>
      <delete file="../click-${version}.zip"/>
      <zip basedir="."
           destfile="../click-${version}.zip"
           includes="click-${version}/**"/>
      <delete dir="click-${version}" quiet="false"/>
   </target>  


   <target name="build-examples" description="build click-examples WAR file">
      <ant antfile="build.xml" 
           dir="examples"
           target="build" 
           inheritall="false"/>
   </target>


   <target name="build-mock" description="build mock JAR file">
      <available file="dist/click-${version}.jar" property="isClickAvail"/>
      <fail message="Build framework first with 'build-framework'">
         <condition>
  	        <or><isfalse value="${isClickAvail}"/></or>
  	     </condition>
      </fail>
      <delete file="dist/click-mock-${version}.jar" quiet="false"/>
      <delete dir="mock/classes" quiet="false"/>
      <mkdir dir="mock/classes"/>
      <copy todir="mock/classes">
         <fileset dir="mock/src">
            <exclude name="**/package.html"/>
         </fileset>
      </copy>
      <javac srcdir="mock/src"
             destdir="mock/classes"
             debug="true"
             excludes="**/Test*"
             encoding="ISO-8859-1"
             source="1.4">
         <classpath refid="classpath.mock"/>
      </javac>
      <jar destfile="dist/click-mock-${version}.jar">
         <manifest>
           <attribute name="Click-Version" value="${version}"/>
           <attribute name="Package" value="net.sf.click"/>
           <attribute name="Built-By" value="${user.name}"/>
         </manifest>
         <fileset dir="mock/classes"/>
      </jar>  
      <digestMacro file="dist/click-mock-${version}.jar"/>
   </target>


   <target name="build-extras" description="build extras JAR file">
      <available file="dist/click-${version}.jar" property="isClickAvail"/>
      <fail message="Build framework first with 'build-framework'">
         <condition>
  	        <or><isfalse value="${isClickAvail}"/></or>
  	     </condition>
      </fail>
      <delete file="dist/click-extras-${version}.jar" quiet="false"/>
      <delete dir="extras/classes" quiet="false"/>
      <mkdir dir="extras/classes"/>
      <copy todir="extras/classes">
         <fileset dir="extras/src">
            <exclude name="**/package.html"/>
         </fileset>
      </copy>
      <javac srcdir="extras/src"
             destdir="extras/classes"
             debug="true"
             excludes="**/Test*"
             encoding="ISO-8859-1"
             source="1.4">
         <classpath refid="classpath.extras"/>
      </javac>  
      <jar destfile="dist/click-extras-${version}.jar">
         <manifest>
           <attribute name="Click-Version" value="${version}"/>
           <attribute name="Package" value="net.sf.click.extras"/>
           <attribute name="Built-By" value="${user.name}"/>
         </manifest>
         <fileset dir="extras/classes"/>
      </jar>  
      <digestMacro file="dist/click-extras-${version}.jar"/>
      <!-- Generate Cayenne 1.2.x JAR -->
   	  <delete dir="temp" quiet="false"/>
   	  <mkdir dir="temp/src"/>
   	  <mkdir dir="temp/classes"/>
      <copy todir="temp/src">
         <fileset dir="extras/src">
            <exclude name="**/package.html"/>
         </fileset>
      </copy>
   	  <replace dir="temp/src" 
   	  	       token="org.apache.cayenne" 
   	  	       value="org.objectstyle.cayenne"/>
      <javac srcdir="temp/src"
             destdir="temp/classes"
             debug="true"
             excludes="**/Test*"
             encoding="ISO-8859-1"
             source="1.4">
          <classpath refid="classpath.extras.cayenne.1x"/>
      </javac>  
      <copy todir="temp/classes">
          <fileset dir="extras/src">
              <exclude name="**/package.html"/>
          </fileset>
      </copy>
      <jar destfile="dist/click-extras-${version}-cayenne-1x.jar">
         <manifest>
           <attribute name="Click-Version" value="${version}"/>
           <attribute name="Package" value="net.sf.click.extras"/>
           <attribute name="Built-By" value="${user.name}"/>
         </manifest>
         <fileset dir="temp/classes"/>
      </jar>
      <digestMacro file="dist/click-extras-${version}-cayenne-1x.jar"/> 	  
	  <delete dir="temp" quiet="false"/>
   </target>


   <target name="build-framework" description="build framework JAR file">
      <mkdir dir="dist"/>
      <available file="lib/${jar.codec}" property="isJarAvail"/>
      <fail message="Download JAR dependencies first with 'get-deps'">
         <condition>
  	        <or><isfalse value="${isJarAvail}"/></or>
  	     </condition>
      </fail>
      <delete file="dist/click-${version}.jar" quiet="false"/>
      <delete file="dist/click-nodeps-${version}.jar" quiet="false"/>
      <property name="dir.source" value="framework/src"/>
      <property name="dir.classes" value="framework/classes"/>
      <delete dir="${dir.classes}" quiet="false"/>
      <mkdir dir="${dir.classes}"/>
      <copy todir="${dir.classes}">
         <fileset dir="${dir.source}">
            <exclude name="**/package.html"/>
         </fileset>
      </copy>
      <!-- No Dependencies -->
      <javac srcdir="${dir.source}"
             destdir="${dir.classes}"
             debug="true"
             encoding="ISO-8859-1"
             source="1.4">
         <classpath refid="classpath.framework"/>
      </javac>  
      <jar destfile="dist/click-nodeps-${version}.jar">
         <manifest>
           <attribute name="Click-Version" value="${version}"/>
           <attribute name="Package" value="net.sf.click"/>
           <attribute name="Built-By" value="${user.name}"/>
         </manifest>
         <fileset dir="${dir.classes}"/>
      </jar>
      <digestMacro file="dist/click-nodeps-${version}.jar"/> 
	    <!-- With Dependencies -->
      <unzip src="lib/${jar.codec}" dest="${dir.classes}">
        <!-- Exclude .html pages -->
        <patternset>
          <include name="**/*.class"/>
          <exclude name="**/*.html"/>
        </patternset>
      </unzip>
      <unzip src="lib/${jar.collections}" dest="${dir.classes}"/>
      <unzip src="lib/${jar.io}" dest="${dir.classes}"/>
      <unzip src="lib/${jar.lang}" dest="${dir.classes}"/> 
      <unzip src="lib/${jar.ognl}" dest="${dir.classes}"/> 
      <unzip src="lib/${jar.upload}" dest="${dir.classes}"/> 
      <unzip src="lib/${jar.velocity}" dest="${dir.classes}"/> 
      <jar destfile="dist/click-${version}.jar">
         <manifest>
           <attribute name="Click-Version" value="${version}"/>
           <attribute name="Package" value="net.sf.click"/>
           <attribute name="Built-By" value="${user.name}"/>
         </manifest>
         <fileset dir="${dir.classes}">
            <exclude name="org/apache/velocity/anakia/**"/>
            <exclude name="org/apache/velocity/test/**"/>
            <exclude name="org/apache/velocity/texen/**"/>
         </fileset>
      </jar>
      <digestMacro file="dist/click-${version}.jar"/> 
   </target>


   <target name="build-maven-bundles" 
           depends="build-framework, build-mock, build-extras"
           description="build Maven repository upload bundles">
      <!-- Start with a clean directory -->
      <delete dir="${maven-bundle}" quiet="false"/>
      <mkdir dir="${maven-bundle}"/>
      <buildBundleMacro name="click"/>
      <buildBundleMacro name="click-nodeps"/>
      <buildBundleMacro name="click-extras"/>
      <buildBundleMacro name="click-mock"/>
   </target>

   
   <target name="build-sources"
           description="build source ZIP files for use with IDEs">
      <property name="dir.source" value="framework/src"/>
      <!-- zip the framework without dependencies-->
      <zip destfile="dist/click-nodeps-${version}-src.zip">
         <fileset dir="${dir.source}">
            <exclude name="**/.html"/>
            <exclude name="**/.css"/>
            <exclude name="**/.js"/>
            <exclude name="**/.gif"/>
         </fileset>
      </zip>
      <!-- zip the framework with dependencies:-->
      <!-- this is not ready since the sources for the used jars are not available -->
      <zip destfile="dist/click-${version}-src.zip">
         <fileset dir="${dir.source}">
            <exclude name="**/package.html"/>
         </fileset>
      </zip>
      <!-- zip extras -->
      <zip destfile="dist/click-extras-${version}-src.zip" >
         <fileset dir="extras/src">
            <exclude name="**/*.html"/>
         </fileset>
      </zip>
      <!-- zip mock -->
      <zip destfile="dist/click-mock-${version}-src.zip" >
         <fileset dir="mock/src">
            <exclude name="**/*.html"/>
         </fileset>
      </zip>
   </target>


   <target name="checkstyle" description="run checkstyle report on Java soruce">
      <checkstyle config="build/checkstyle-checks.xml">
         <fileset dir="framework/src/net" includes="**/*.java"/>
         <fileset dir="extras/src" includes="**/*.java"/>
      </checkstyle>
   </target>

   
   <target name="clean"> 
      <delete dir="dist" quiet="false"/>
      <mkdir dir="dist"/>
      <delete>
        <fileset dir="framework/test" includes="TEST-*.txt"/>
      </delete>
      <delete>
        <fileset dir="extras/test" includes="TEST-*.txt"/>
      </delete>
      <delete>
        <fileset dir="mock/test" includes="TEST-*.txt"/>
      </delete>
   </target>


   <target name="deploy-examples" description="copy example WAR files to app server"> 
      <delete file="${dir.appserver}/click-examples.war" quiet="true"/>
   	  <sleep seconds="5"/>
      <copy file="dist/click-examples.war" todir="${dir.appserver}" overwrite="true"/>
   </target>


   <target name="format-java">
      <linetrim srcdir="framework/src" includes="**/*.java"/>
      <replacetabs srcdir="framework/src" includes="**/*.java"/>
      <linetrim srcdir="extras/src" includes="**/*.java"/>
      <replacetabs srcdir="extras/src" includes="**/*.java"/>
      <linetrim srcdir="mock/src" includes="**/*.java"/>
      <replacetabs srcdir="mock/src" includes="**/*.java"/>
      <linetrim srcdir="examples/src" includes="**/*.java"/>
      <replacetabs srcdir="examples/src" includes="**/*.java"/>
      <linetrim srcdir="template/src" includes="**/*.java"/>
      <replacetabs srcdir="template/src" includes="**/*.java"/>
   </target>

 
   <target name="get-deps" description="download JAR dependencies">
      <downloadMacro name="${jar.cayenne.1x}" path="org.objectstyle.cayenne"/>
      <downloadMacro name="${jar.codec}" path="commons-codec"/>
      <downloadMacro name="${jar.collections}" path="commons-collections"/>
      <downloadMacro name="${jar.io}" path="commons-io"/>
      <downloadMacro name="${jar.lang}" path="commons-lang"/>
      <downloadMacro name="${jar.log4j}" path="log4j"/>
      <downloadMacro name="${jar.ognl}" path="ognl"/>
      <downloadMacro name="${jar.upload}" path="commons-fileupload"/>
      <downloadMacro name="${jar.hibernate}" path="org.hibernate"/>
      <downloadMacro name="${jar.junit}" path="junit"/>
      <downloadMacro name="${jar.servlet}" path="javax.servlet"/>
      <downloadMacro name="${jar.spring-beans}" path="org.springframework"/>
      <downloadMacro name="${jar.spring-context}" path="org.springframework"/>
      <downloadMacro name="${jar.spring-core}" path="org.springframework"/>
      <downloadMacro name="${jar.spring-web}" path="org.springframework"/>
      <get src="http://repo1.maven.org/maven/velocity/jars/${jar.velocity}" 
   	       dest="lib/${jar.velocity}"
   	       verbose="true"
   	       usetimestamp="true"/> 
      <get src="http://mirrors.ibiblio.org/pub/mirrors/maven2/org/apache/cayenne/cayenne-nodeps/2.0.4/${jar.cayenne}" 
 	       dest="lib/${jar.cayenne}"
 	       verbose="true"
 	       usetimestamp="true"/> 
      <ant antfile="build.xml" 
           dir="examples"
           target="get-deps"
           inheritall="false"/>	
   </target>

   
   <target name="get-deps-proxy" description="download JAR dependencies">
      <setproxy proxyhost="${proxy.host}" proxyport="${proxy.port}"/>
      <antcall target="get-deps"/>
   </target>


   <target name="help" description="display the Help message">
      <echo>Click ${version} web application framework
===================================

Main targets:

	build-all             build framework, extras, mock, examples
	build-distribution    build distribution ZIP file
	build-examples        build click-examples WAR file
	build-extras          build click-extras JAR file
  build-mock            build click-mock JAR file
	build-framework       build click framework JAR file
	build-maven-bundles   build Maven repository upload bundles
	build-sources         build source ZIP files for use with IDEs
	checkstyle            run checkstyle report on Java source
	deploy-examples       copy click-examples WAR file to app server
	get-deps              download JAR dependencies
	get-deps-proxy        download JAR dependencies via proxy
	help                  display the Help message
	javadoc               create Javadoc HTML files
    project-quick-start   build application template

Environment:

	java.home = ${java.home}
	ant.home  = ${ant.home}

Please ensure you have configured build.properties</echo>
   </target> 
	
   <target name="javadoc" description="create Javadoc HTML files">
      <!-- Framework -->
      <delete quiet="false" failonerror="false">
         <fileset dir="documentation/docs/click-api" includes="**/*"/>
      </delete>

      <javadocMacro src="framework/src"
                    destdir="documentation/docs/click-api"
                    windowtitle="Click Framework API"
                    doctitle="Click API"
                    classpath="classpath.framework"/>

      <copy file="framework/src/net/sf/click/control/image-submit.gif"
            todir="documentation/docs/click-api/net/sf/click/control"/>
      <!-- Extras -->
      <delete quiet="false" failonerror="false">
          <fileset dir="documentation/docs/extras-api" includes="**/*"/>
      </delete>

      <javadocMacro src="extras/src"
                    destdir="documentation/docs/extras-api"
                    windowtitle="Click Extras API"
                    doctitle="Click Extras API"
                    classpath="classpath.extras"/>

      <!-- Mock -->
      <delete quiet="false" failonerror="false">
         <fileset dir="documentation/docs/mock-api" includes="**/*"/>
      </delete>

      <javadocMacro src="mock/src"
                    destdir="documentation/docs/mock-api"
                    windowtitle="Click Mock API"
                    doctitle="Click Mock API"
                    classpath="classpath.mock"/>

      <copy file="documentation/images/post-sequence-diagram.png"
          todir="documentation/docs/click-api/net/sf/click/"/>
      <copy file="documentation/images/control-post-sequence-diagram.png"
            todir="documentation/docs/click-api/net/sf/click/"/>
      <copy file="extras/src/net/sf/click/extras/control/calendar/calendar.gif"
            todir="documentation/docs/extras-api/net/sf/click/extras/control"/>
      <copy file="documentation/images/form-table.png"
            todir="documentation/docs/extras-api/net/sf/click/extras/control"/>
      <copy file="documentation/images/menu.png"
            todir="documentation/docs/extras-api/net/sf/click/extras/control"/>
      <copy file="documentation/images/link-decorator.png"
          todir="documentation/docs/extras-api/net/sf/click/extras/control"/>
      <copy file="documentation/images/tabbed-form.png"
            todir="documentation/docs/extras-api/net/sf/click/extras/control"/>
      <copy file="documentation/images/table.png"
            todir="documentation/docs/click-api/net/sf/click/control"/>
      <copy file="documentation/images/tree.png"
            todir="documentation/docs/extras-api/net/sf/click/extras/tree"/>
      <copy file="documentation/images/checkbox-tree.png"
            todir="documentation/docs/extras-api/net/sf/click/extras/tree"/>
      <copy file="documentation/images/line-chart.png"
             todir="documentation/docs/extras-api/net/sf/click/extras/graph"/>
      <copy file="documentation/images/bar-chart.png"
             todir="documentation/docs/extras-api/net/sf/click/extras/graph"/>
      <copy file="documentation/images/pie-chart.png"
             todir="documentation/docs/extras-api/net/sf/click/extras/graph"/>
      <copy file="framework/stylesheet.css"
      	    overwrite="true"
            todir="documentation/docs/click-api"/>
      <copy file="framework/stylesheet.css"  
            overwrite="true"
            todir="documentation/docs/extras-api"/>
      <copy file="framework/stylesheet.css"
      	    overwrite="true"
            todir="documentation/docs/mock-api"/>
      <copy file="framework/stylesheet.css"
      	    overwrite="true"
            todir="documentation/docs/servlet-api"/>
   </target>

   
   <target name="test-framework">
      <copy todir="framework/classes">
         <fileset dir="framework/src">
            <exclude name="**/package.html"/>
         </fileset>
      </copy>
      <copy todir="framework/classes">
         <fileset dir="framework/test">
            <exclude name="**/package.html"/>
         </fileset>
      </copy>
      <javac srcdir="framework/src;framework/test;extras/src;mock/src" 
             destdir="framework/classes" 
             debug="true"
             encoding="ISO-8859-1"
             source="1.4">
         <classpath refid="classpath.framework"/>
         <classpath refid="classpath.extras"/>
         <classpath refid="classpath.test"/>
      </javac>
      <junit haltonfailure="yes" showoutput="true">
         <classpath refid="classpath.framework"/>
         <classpath refid="classpath.extras"/>
         <classpath refid="classpath.test"/>
         <formatter type="plain"/>
         <batchtest fork="yes" todir="framework/test">
            <fileset dir="framework/test">
               <include name="**/*Test.java"/>
            </fileset>
         </batchtest>
      </junit>
      <delete>
        <fileset dir="framework/test" includes="TEST-*.txt"/>
      </delete>
   </target>

   
   <target name="test-extras">
      <copy todir="extras/classes">
         <fileset dir="framework/src">
            <exclude name="**/package.html"/>
         </fileset>
      </copy>
      <copy todir="extras/classes">
         <fileset dir="extras/test">
            <exclude name="**/package.html"/>
         </fileset>
      </copy>
      <javac srcdir="framework/src;extras/src;extras/test;mock/src" 
             destdir="extras/classes" 
             debug="true"
             encoding="ISO-8859-1"
             source="1.4">
         <classpath refid="classpath.framework"/>
         <classpath refid="classpath.extras"/>
         <classpath refid="classpath.test"/>
      </javac>
      <junit haltonfailure="yes" showoutput="true">
         <classpath refid="classpath.framework"/>
         <classpath refid="classpath.extras"/>
         <classpath refid="classpath.test"/>
         <formatter type="plain"/>
         <batchtest fork="yes" todir="extras/test">
            <fileset dir="extras/test">
               <include name="**/*Test.java"/>
            </fileset>
         </batchtest>
      </junit>
      <delete>
        <fileset dir="extras/test" includes="TEST-*.txt"/>
      </delete>
   </target>


   <target name="test-mock">
      <copy todir="mock/classes">
         <fileset dir="mock/src">
            <exclude name="**/package.html"/>
         </fileset>
      </copy>
      <copy todir="mock/classes">
         <fileset dir="mock/test">
            <exclude name="**/package.html"/>
         </fileset>
      </copy>
      <javac srcdir="framework/src;mock/src;mock/test"
             destdir="mock/classes"
             debug="true"
             encoding="ISO-8859-1"
             source="1.4">
         <classpath refid="classpath.framework"/>
         <classpath refid="classpath.mock"/>
         <classpath refid="classpath.test"/>
      </javac>
      <junit haltonfailure="yes" showoutput="true">
         <classpath refid="classpath.framework"/>
         <classpath refid="classpath.mock"/>
         <classpath refid="classpath.test"/>
         <formatter type="plain"/>
         <batchtest fork="yes" todir="mock/test">
            <fileset dir="mock/test">
               <include name="**/*Test.java"/>
            </fileset>
         </batchtest>
      </junit>
      <delete>
        <fileset dir="mock/test" includes="TEST-*.txt"/>
      </delete>
   </target>


   <target name="test-all" depends="test-framework, test-extras, test-mock"/>
   
	
   <target name="project-quick-start" description="build application template">
      <input 
      	message="Please enter the project name (e.g. quickstart):" 
        addproperty="project-name"/>
      <input 
      	message="Please enter the root package name (e.g. com.${project-name}):" 
        addproperty="package-name"/>
      <input 
    	message="Please enter the web app context path:" 
    	defaultvalue="${project-name}"
        addproperty="context-path"/>
      <delete 
      	dir="../${project-name}" 
      	quiet="false"/>
   	  <package 
   	  	projectName="${project-name}" 
   	  	packageName="${package-name}"/>
      <copy todir="../${project-name}/WebContent">
      	<fileset dir="template/WebContent"/>
      </copy>
      <copy 
      	todir="../${project-name}/WebContent/WEB-INF/lib"
      	file="dist/click-${version}.jar"/>
      <copy 
      	todir="../${project-name}/WebContent/WEB-INF/lib"
      	file="dist/click-extras-${version}.jar"/>
      <copy 
      	todir="../${project-name}/WebContent/WEB-INF/lib"
      	file="lib/${jar.log4j}"/>
      <copy 
      	todir="../${project-name}/lib"
      	file="lib/servlet-api-2.3.jar"/>
      <copy 
      	todir="../${project-name}" 
      	file="template/build.xml"/>
      <copy 
      	todir="../${project-name}" 
      	file="template/README.txt"/>
      <copy todir="${package.path}">
        <fileset dir="template/src/template"/>
      </copy>
   	  <replace 
   	  	token="package template" 
   	  	value="package ${package-name}"
   	  	dir="../${project-name}/src"/>
   	  <replace 
   	  	token="import template" 
   	  	value="import ${package-name}"
   	  	dir="../${project-name}/src"/>
 	  <replace 
 	  	token="template" 
 	  	value="${package-name}"
 	  	file="../${project-name}/WebContent/WEB-INF/click.xml"/>   
 	  <replace 
 	  	token="project-name" 
 	  	value="${project-name}"
 	  	file="../${project-name}/WebContent/border-template.htm"/>   
 	  <replace 
 	  	token="project-name" 
 	  	value="${project-name}"
 	  	file="../${project-name}/WebContent/click/error.htm"/>   
 	  <replace
 	  	token="template-context"
 	  	value="${context-path}"
 	  	dir="../${project-name}"/>
   </target>

   <macrodef name="javadocMacro">
      <attribute name="src"/>
      <attribute name="destdir"/>
      <attribute name="windowtitle"/>
      <attribute name="doctitle"/>
      <attribute name="classpath"/>
      <sequential>
         <javadoc sourcepath="@{src}"
               destdir="@{destdir}"
               author="true"
               version="true"
               verbose="false"
               windowtitle="@{windowtitle}"
      	       packagenames="net.*"
               doctitle="@{doctitle}">
            <classpath refid="@{classpath}"/>
            <link href="http://java.sun.com/j2se/1.4.2/docs/api/"/>
            <link href="http://java.sun.com/j2ee/sdk_1.3/techdocs/api/"/>
            <link href="http://jakarta.apache.org/commons/fileupload/apidocs/"/>
            <link href="http://click.sourceforge.net/docs/click-api/"/>
            <link href="http://www.hibernate.org/hib_docs/v3/api/"/>
            <link href="http://static.springframework.org/spring/docs/1.2.x/api/"/>
            <bottom><![CDATA[
<style type='text/css'>
.str{color:#2A00FF;}.kwd{color:#7F0055;font-weight:bold;}.com{color:#3F7F5F;}.typ{color:#000;}.lit{color:#066;}.pun{color:#660;}.pln{color:#000;}.tag{color:#000099;font-weight:bold;}.atn{color:#009900;}.atv{color:#000;}.dec{color:#606;}pre.prettyprint{padding:2px;border:1px solid #888;overflow:auto;}@media print{.str{color:#2A00FF;}.kwd{color:#7F0055;font-weight:bold;}.com{color:#3F7F5F;font-style:italic;}.typ{color:#000;font-weight:bold;}.lit{color:#044;}.pun{color:#440;}.pln{color:#000;}.tag{color:#000099;font-weight:bold;}.atn{color:#009900;}.atv{color:#000;}}
</style>
<script type='text/javascript'>
var PR_keywords={};(function(){var CPP_KEYWORDS='abstract bool break case catch char class const '+'const_cast continue default delete deprecated dllexport dllimport do '+'double dynamic_cast else enum explicit extern false float for friend '+'goto if inline int long mutable naked namespace new noinline noreturn '+'nothrow novtable operator private property protected public register '+'reinterpret_cast return selectany short signed sizeof static '+'static_cast struct switch template this thread throw true try typedef '+'typeid typename union unsigned using declaration, directive uuid '+'virtual void volatile while typeof';var CSHARP_KEYWORDS='as base by byte checked decimal delegate descending '+'event finally fixed foreach from group implicit in interface internal '+'into is lock null object override orderby params readonly ref sbyte '+'sealed stackalloc string select uint ulong unchecked unsafe ushort var';var JAVA_KEYWORDS='package synchronized boolean implements import throws '+'instanceof transient extends final strictfp native super';var JSCRIPT_KEYWORDS='debugger export function with NaN Infinity';var PERL_KEYWORDS='require sub unless until use elsif BEGIN END';var PYTHON_KEYWORDS='and assert def del elif except exec global lambda '+'not or pass print raise yield False True None';var RUBY_KEYWORDS='then end begin rescue ensure module when undef next '+'redo retry alias defined';var SH_KEYWORDS='done fi';var KEYWORDS=[CPP_KEYWORDS,CSHARP_KEYWORDS,JAVA_KEYWORDS,JSCRIPT_KEYWORDS,PERL_KEYWORDS,PYTHON_KEYWORDS,RUBY_KEYWORDS,SH_KEYWORDS];for(var k=0;k<KEYWORDS.length;k++){var kw=KEYWORDS[k].split(' ');for(var i=0;i<kw.length;i++){if(kw[i]){PR_keywords[kw[i]]=true;}}}}).call(this);var PR_STRING='str';var PR_KEYWORD='kwd';var PR_COMMENT='com';var PR_TYPE='typ';var PR_LITERAL='lit';var PR_PUNCTUATION='pun';var PR_PLAIN='pln';var PR_TAG='tag';var PR_DECLARATION='dec';var PR_SOURCE='src';var PR_ATTRIB_NAME='atn';var PR_ATTRIB_VALUE='atv';var PR_TAB_WIDTH=8;function PR_isWordChar(ch){return(ch>='a'&&ch<='z')||(ch>='A'&&ch<='Z');}
function PR_spliceArrayInto(inserted,container,containerPosition,countReplaced){inserted.unshift(containerPosition,countReplaced||0);try{container.splice.apply(container,inserted);}finally{inserted.splice(0,2);}}
var REGEXP_PRECEDER_PATTERN=(function(){var preceders=['!','!=','!==','#','%','%=','&','&&','&&=','&=','(','*','*=','+=',',','-=','->','/','/=',':','::',';','<','<<','<<=','<=','=','==','===','>','>=','>>','>>=','>>>','>>>=','?','@','[','^','^=','^^','^^=','{','|','|=','||','||=','~','break','case','continue','delete','do','else','finally','instanceof','return','throw','try','typeof'];var pattern='(?:'+'(?:(?:^|[^0-9\.])\\.{1,3})|'+'(?:(?:^|[^\\+])\\+)|'+'(?:(?:^|[^\\-])-)';for(var i=0;i<preceders.length;++i){var preceder=preceders[i];if(PR_isWordChar(preceder.charAt(0))){pattern+='|\\b'+preceder;}else{pattern+='|'+preceder.replace(/([^=<>:&])/g,'\\$1');}}
pattern+='|^)\\s*$';return new RegExp(pattern);})();var pr_amp=/&/g;var pr_lt=/</g;var pr_gt=/>/g;var pr_quot=/\"/g;function PR_attribToHtml(str){return str.replace(pr_amp,'&amp;').replace(pr_lt,'&lt;').replace(pr_gt,'&gt;').replace(pr_quot,'&quot;');}
function PR_textToHtml(str){return str.replace(pr_amp,'&amp;').replace(pr_lt,'&lt;').replace(pr_gt,'&gt;');}
var pr_ltEnt=/&lt;/g;var pr_gtEnt=/&gt;/g;var pr_aposEnt=/&apos;/g;var pr_quotEnt=/&quot;/g;var pr_ampEnt=/&amp;/g;function PR_htmlToText(html){var pos=html.indexOf('&');if(pos<0){return html;}
for(--pos;(pos=html.indexOf('&#',pos+1))>=0;){var end=html.indexOf(';',pos);if(end>=0){var num=html.substring(pos+3,end);var radix=10;if(num&&num.charAt(0)=='x'){num=num.substring(1);radix=16;}
var codePoint=parseInt(num,radix);if(!isNaN(codePoint)){html=(html.substring(0,pos)+String.fromCharCode(codePoint)+
html.substring(end+1));}}}
return html.replace(pr_ltEnt,'<').replace(pr_gtEnt,'>').replace(pr_aposEnt,\"'\").replace(pr_quotEnt,'\"').replace(pr_ampEnt,'&');}
function PR_isRawContent(node){return'XMP'==node.tagName;}
var PR_innerHtmlWorks=null;function PR_getInnerHtml(node){if(null===PR_innerHtmlWorks){var testNode=document.createElement('PRE');testNode.appendChild(document.createTextNode('<!DOCTYPE foo PUBLIC \"foo bar\">\n<foo />'));PR_innerHtmlWorks=!/</.test(testNode.innerHTML);}
if(PR_innerHtmlWorks){var content=node.innerHTML;if(PR_isRawContent(node)){content=PR_textToHtml(content);}
return content;}
var out=[];for(var child=node.firstChild;child;child=child.nextSibling){PR_normalizedHtml(child,out);}
return out.join('');}
function PR_normalizedHtml(node,out){switch(node.nodeType){case 1:var name=node.tagName.toLowerCase();out.push('\074',name);for(var i=0;i<node.attributes.length;++i){var attr=node.attributes[i];if(!attr.specified){continue;}
out.push(' ');PR_normalizedHtml(attr,out);}
out.push('>');for(var child=node.firstChild;child;child=child.nextSibling){PR_normalizedHtml(child,out);}
if(node.firstChild||!/^(?:br|link|img)$/.test(name)){out.push('<\/',name,'>');}
break;case 2:out.push(node.name.toLowerCase(),'=\"',PR_attribToHtml(node.value),'\"');break;case 3:case 4:out.push(PR_textToHtml(node.nodeValue));break;}}
function PR_tabExpander(tabWidth){var SPACES='                ';var charInLine=0;return function(plainText){var out=null;var pos=0;for(var i=0,n=plainText.length;i<n;++i){var ch=plainText.charAt(i);switch(ch){case'\t':if(!out){out=[];}
out.push(plainText.substring(pos,i));var nSpaces=tabWidth-(charInLine%tabWidth);charInLine+=nSpaces;for(;nSpaces>=0;nSpaces-=SPACES.length){out.push(SPACES.substring(0,nSpaces));}
pos=i+1;break;case'\n':charInLine=0;break;default:++charInLine;}}
if(!out){return plainText;}
out.push(plainText.substring(pos));return out.join('');};}
var pr_chunkPattern=/(?:[^<]+|<!--[\s\S]*?-->|<!\[CDATA\[([\s\S]*?)\]\]>|<\/?[a-zA-Z][^>]*>|<)/g;var pr_commentPrefix=/^<!--/;var pr_cdataPrefix=/^<\[CDATA\[/;var pr_brPrefix=/^<br\b/i;function PR_extractTags(s){var matches=s.match(pr_chunkPattern);var sourceBuf=[];var sourceBufLen=0;var extractedTags=[];if(matches){for(var i=0,n=matches.length;i<n;++i){var match=matches[i];if(match.length>1&&match.charAt(0)==='<'){if(pr_commentPrefix.test(match)){continue;}
if(pr_cdataPrefix.test(match)){sourceBuf.push(match.substring(9,match.length-3));sourceBufLen+=match.length-12;}else if(pr_brPrefix.test(match)){sourceBuf.push('\n');sourceBufLen+=1;}else{extractedTags.push(sourceBufLen,match);}}else{var literalText=PR_htmlToText(match);sourceBuf.push(literalText);sourceBufLen+=literalText.length;}}}
return{source:sourceBuf.join(''),tags:extractedTags};}
function PR_createSimpleLexer(shortcutStylePatterns,fallthroughStylePatterns){var shortcuts={};(function(){var allPatterns=shortcutStylePatterns.concat(fallthroughStylePatterns);for(var i=allPatterns.length;--i>=0;){var patternParts=allPatterns[i];var shortcutChars=patternParts[3];if(shortcutChars){for(var c=shortcutChars.length;--c>=0;){shortcuts[shortcutChars.charAt(c)]=patternParts;}}}})();var nPatterns=fallthroughStylePatterns.length;return function(sourceCode,opt_basePos){opt_basePos=opt_basePos||0;var decorations=[opt_basePos,PR_PLAIN];var lastToken='';var pos=0;var tail=sourceCode;while(tail.length){var style;var token=null;var patternParts=shortcuts[tail.charAt(0)];if(patternParts){var match=tail.match(patternParts[1]);token=match[0];style=patternParts[0];}else{for(var i=0;i<nPatterns;++i){patternParts=fallthroughStylePatterns[i];var contextPattern=patternParts[2];if(contextPattern&&!contextPattern.test(lastToken)){continue;}
var match=tail.match(patternParts[1]);if(match){token=match[0];style=patternParts[0];break;}}
if(!token){style=PR_PLAIN;token=tail.substring(0,1);}}
decorations.push(opt_basePos+pos,style);pos+=token.length;tail=tail.substring(token.length);if(style!==PR_COMMENT&&/\S/.test(token)){lastToken=token;}}
return decorations;};}
var PR_C_STYLE_STRING_AND_COMMENT_LEXER=PR_createSimpleLexer([[PR_STRING,/^\'(?:[^\\\']|\\[\s\S])*(?:\'|$)/,null,\"'\"],[PR_STRING,/^\"(?:[^\\\"]|\\[\s\S])*(?:\"|$)/,null,'\"'],[PR_STRING,/^\`(?:[^\\\`]|\\[\s\S])*(?:\`|$)/,null,'`']],[[PR_PLAIN,/^(?:[^\'\"\`\/\#]+)/,null,' \r\n'],[PR_COMMENT,/^#[^\r\n]*/,null,'#'],[PR_COMMENT,/^\/\/[^\r\n]*/,null],[PR_STRING,/^\/(?:[^\\\*\/]|\\[\s\S])+(?:\/|$)/,REGEXP_PRECEDER_PATTERN],[PR_COMMENT,/^\/\*[\s\S]*?(?:\*\/|$)/,null]]);function PR_splitStringAndCommentTokens(sourceCode){return PR_C_STYLE_STRING_AND_COMMENT_LEXER(sourceCode);}
var PR_C_STYLE_LITERAL_IDENTIFIER_PUNC_RECOGNIZER=PR_createSimpleLexer([],[[PR_PLAIN,/^\s+/,null,' \r\n'],[PR_PLAIN,/^[a-z_$@][a-z_$@0-9]*/i,null],[PR_LITERAL,/^0x[a-f0-9]+[a-z]/i,null],[PR_LITERAL,/^(?:\d(?:_\d+)*\d*(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?[a-z]*/i,null,'123456789'],[PR_PUNCTUATION,/^[^\s\w\.$@]+/,null]]);function PR_splitNonStringNonCommentTokens(source,decorations){for(var i=0;i<decorations.length;i+=2){var style=decorations[i+1];if(style===PR_PLAIN){var start=decorations[i];var end=i+2<decorations.length?decorations[i+2]:source.length;var chunk=source.substring(start,end);var subDecs=PR_C_STYLE_LITERAL_IDENTIFIER_PUNC_RECOGNIZER(chunk,start);for(var j=0,m=subDecs.length;j<m;j+=2){var subStyle=subDecs[j+1];if(subStyle===PR_PLAIN){var subStart=subDecs[j];var subEnd=j+2<m?subDecs[j+2]:chunk.length;var token=source.substring(subStart,subEnd);if(token=='.'){subDecs[j+1]=PR_PUNCTUATION;}else if(token in PR_keywords){subDecs[j+1]=PR_KEYWORD;}else if(/^@?[A-Z][A-Z$]*[a-z][A-Za-z$]*$/.test(token)){subDecs[j+1]=token.charAt(0)=='@'?PR_LITERAL:PR_TYPE;}}}
PR_spliceArrayInto(subDecs,decorations,i,2);i+=subDecs.length-2;}}
return decorations;}
var PR_MARKUP_LEXER=PR_createSimpleLexer([],[[PR_PLAIN,/^[^<]+/,null],[PR_DECLARATION,/^<!\w[^>]*(?:>|$)/,null],[PR_COMMENT,/^<!--[\s\S]*?(?:-->|$)/,null],[PR_SOURCE,/^<\?[\s\S]*?(?:\?>|$)/,null],[PR_SOURCE,/^<%[\s\S]*?(?:%>|$)/,null],[PR_SOURCE,/^<(script|style|xmp)\b[^>]*>[\s\S]*?<\/\1\b[^>]*>/i,null],[PR_TAG,/^<\/?\w[^<>]*>/,null]]);var PR_SOURCE_CHUNK_PARTS=/^(<[^>]*>)([\s\S]*)(<\/[^>]*>)$/;function PR_tokenizeMarkup(source){var decorations=PR_MARKUP_LEXER(source);for(var i=0;i<decorations.length;i+=2){if(decorations[i+1]===PR_SOURCE){var start=decorations[i];var end=i+2<decorations.length?decorations[i+2]:source.length;var sourceChunk=source.substring(start,end);var match=(sourceChunk.match(PR_SOURCE_CHUNK_PARTS));if(match){decorations.splice(i,2,start,PR_TAG,start+match[1].length,PR_SOURCE,start+match[1].length+(match[2]||'').length,PR_TAG);}}}
return decorations;}
var PR_TAG_LEXER=PR_createSimpleLexer([[PR_ATTRIB_VALUE,/^\'[^\']*(?:\'|$)/,null,\"'\"],[PR_ATTRIB_VALUE,/^\"[^\"]*(?:\"|$)/,null,'\"'],[PR_PUNCTUATION,/^[<>\/=]+/,null,'<>/=']],[[PR_TAG,/^[\w-]+/,/^</],[PR_ATTRIB_VALUE,/^[\w-]+/,/^=/],[PR_ATTRIB_NAME,/^[\w-]+/,null],[PR_PLAIN,/^\s+/,null,' \r\n']]);function PR_splitTagAttributes(source,decorations){for(var i=0;i<decorations.length;i+=2){var style=decorations[i+1];if(style===PR_TAG){var start=decorations[i];var end=i+2<decorations.length?decorations[i+2]:source.length;var chunk=source.substring(start,end);var subDecorations=PR_TAG_LEXER(chunk,start);PR_spliceArrayInto(subDecorations,decorations,i,2);i+=subDecorations.length-2;}}
return decorations;}
function PR_splitSourceNodes(source,decorations){for(var i=0;i<decorations.length;i+=2){var style=decorations[i+1];if(style==PR_SOURCE){var start=decorations[i];var end=i+2<decorations.length?decorations[i+2]:source.length;var subDecorations=PR_decorateSource(source.substring(start,end));for(var j=0,m=subDecorations.length;j<m;j+=2){subDecorations[j]+=start;}
PR_spliceArrayInto(subDecorations,decorations,i,2);i+=subDecorations.length-2;}}
return decorations;}
function PR_splitSourceAttributes(source,decorations){var nextValueIsSource=false;for(var i=0;i<decorations.length;i+=2){var style=decorations[i+1];if(style===PR_ATTRIB_NAME){var start=decorations[i];var end=i+2<decorations.length?decorations[i+2]:source.length;nextValueIsSource=/^on|^style$/i.test(source.substring(start,end));}else if(style==PR_ATTRIB_VALUE){if(nextValueIsSource){var start=decorations[i];var end=i+2<decorations.length?decorations[i+2]:source.length;var attribValue=source.substring(start,end);var attribLen=attribValue.length;var quoted=(attribLen>=2&&/^[\"\']/.test(attribValue)&&attribValue.charAt(0)===attribValue.charAt(attribLen-1));var attribSource;var attribSourceStart;var attribSourceEnd;if(quoted){attribSourceStart=start+1;attribSourceEnd=end-1;attribSource=attribValue;}else{attribSourceStart=start+1;attribSourceEnd=end-1;attribSource=attribValue.substring(1,attribValue.length-1);}
var attribSourceDecorations=PR_decorateSource(attribSource);for(var j=0,m=attribSourceDecorations.length;j<m;j+=2){attribSourceDecorations[j]+=attribSourceStart;}
if(quoted){attribSourceDecorations.push(attribSourceEnd,PR_ATTRIB_VALUE);PR_spliceArrayInto(attribSourceDecorations,decorations,i+2,0);}else{PR_spliceArrayInto(attribSourceDecorations,decorations,i,2);}}
nextValueIsSource=false;}}
return decorations;}
function PR_decorateSource(sourceCode){var decorations=PR_splitStringAndCommentTokens(sourceCode);decorations=PR_splitNonStringNonCommentTokens(sourceCode,decorations);return decorations;}
function PR_decorateMarkup(sourceCode){var decorations=PR_tokenizeMarkup(sourceCode);decorations=PR_splitTagAttributes(sourceCode,decorations);decorations=PR_splitSourceNodes(sourceCode,decorations);decorations=PR_splitSourceAttributes(sourceCode,decorations);return decorations;}
function PR_recombineTagsAndDecorations(sourceText,extractedTags,decorations){var html=[];var outputIdx=0;var openDecoration=null;var currentDecoration=null;var tagPos=0;var decPos=0;var tabExpander=PR_tabExpander(PR_TAB_WIDTH);function emitTextUpTo(sourceIdx){if(sourceIdx>outputIdx){if(openDecoration&&openDecoration!==currentDecoration){html.push('</span>');openDecoration=null;}
if(!openDecoration&&currentDecoration){openDecoration=currentDecoration;html.push('<span class=\"',openDecoration,'\">');}
var htmlChunk=PR_textToHtml(tabExpander(sourceText.substring(outputIdx,sourceIdx))).replace(/(\r\n?|\n| ) /g,'$1&nbsp;').replace(/\r\n?|\n/g,'&nbsp;<br>');html.push(htmlChunk);outputIdx=sourceIdx;}}
while(true){var outputTag;if(tagPos<extractedTags.length){if(decPos<decorations.length){outputTag=extractedTags[tagPos]<=decorations[decPos];}else{outputTag=true;}}else{outputTag=false;}
if(outputTag){emitTextUpTo(extractedTags[tagPos]);if(openDecoration){html.push('</span>');openDecoration=null;}
html.push(extractedTags[tagPos+1]);tagPos+=2;}else if(decPos<decorations.length){emitTextUpTo(decorations[decPos]);currentDecoration=decorations[decPos+1];decPos+=2;}else{break;}}
emitTextUpTo(sourceText.length);if(openDecoration){html.push('</span>');}
return html.join('');}
function prettyPrintOne(sourceCodeHtml){try{var sourceAndExtractedTags=PR_extractTags(sourceCodeHtml);var source=sourceAndExtractedTags.source;var extractedTags=sourceAndExtractedTags.tags;var isMarkup=/^\s*</.test(source)&&/>\s*$/.test(source);var decorations=isMarkup?PR_decorateMarkup(source):PR_decorateSource(source);return PR_recombineTagsAndDecorations(source,extractedTags,decorations);}catch(e){if('console'in window){console.log(e);console.trace();}
return sourceCodeHtml;}}
var PR_SHOULD_USE_CONTINUATION=true;function prettyPrint(opt_whenDone){var codeSegments=[document.getElementsByTagName('pre'),document.getElementsByTagName('code'),document.getElementsByTagName('xmp')];var elements=[];for(var i=0;i<codeSegments.length;++i){for(var j=0;j<codeSegments[i].length;++j){elements.push(codeSegments[i][j]);}}
codeSegments=null;var k=0;function doWork(){var endTime=(PR_SHOULD_USE_CONTINUATION?new Date().getTime()+250:Infinity);for(;k<elements.length&&new Date().getTime()<endTime;k++){var cs=elements[k];if(cs.className&&cs.className.indexOf('prettyprint')>=0){var nested=false;for(var p=cs.parentNode;p!=null;p=p.parentNode){if((p.tagName=='pre'||p.tagName=='code'||p.tagName=='xmp')&&p.className&&p.className.indexOf('prettyprint')>=0){nested=true;break;}}
if(!nested){var content=PR_getInnerHtml(cs);content=content.replace(/(?:\r\n?|\n)$/,'');var newContent=prettyPrintOne(content);if(!PR_isRawContent(cs)){cs.innerHTML=newContent;}else{var pre=document.createElement('PRE');for(var i=0;i<cs.attributes.length;++i){var a=cs.attributes[i];if(a.specified){pre.setAttribute(a.name,a.value);}}
pre.innerHTML=newContent;cs.parentNode.replaceChild(pre,cs);}}}}
if(k<elements.length){setTimeout(doWork,250);}else if(opt_whenDone){opt_whenDone();}}
doWork();}
</script>
            <script type='text/javascript'>prettyPrint();</script>]]></bottom>
         </javadoc>
      
         <!-- Add IE Mark of the Web to each javadoc page -->
         <replace dir="@{destdir}" value="&lt;!-- saved from url=(0014)about:internet --&gt;">
            <include name="**/*.html"/>
            <replacetoken>&lt;!--NewPage--&gt;</replacetoken>
         </replace>
      </sequential>
   </macrodef>

</project>
